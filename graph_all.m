%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Sacha\OneDrive - UCL\EPL\Master\Q9\LSINF2345\PROJECT\Project-Git\LSINF2345\graph2.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/12/02 20:55:58

%% Initialize variables.
clear;
close all;
filename = 'C:\Users\Sacha\OneDrive - UCL\EPL\Master\Q9\LSINF2345\PROJECT\Project-Git\LSINF2345\graph_swapper.txt';
delimiter = {',',' ',']','['};

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', NaN,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
graph1 = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;

%% Plot graph
index_separation = zeros(1,11);
count = 2;
size_graph = size(graph1);
n = size_graph(1);

for a = 1:n
    if graph1(a,1) == -1
        index_separation(count) = a;
        count = count + 1;
    end 
end


for a = 1:10
    length_vector = 8 - sum(isnan(graph1(index_separation(a)+1,:)));
    G = digraph(graph1(index_separation(a)+1,1), graph1(index_separation(a)+1,[2:length_vector]));
    for b = index_separation(a)+2:index_separation(a+1)-1
            length_vector = 8 - sum(isnan(graph1(b,:)));
            G = addedge(G,graph1(b,1), graph1(b,[2:length_vector]));
    end
    figure
    plot(G);
end

%% 
a = 8;
length_vector = 8 - sum(isnan(graph1(index_separation(a)+1,:)));
G = digraph(graph1(index_separation(a)+1,1), graph1(index_separation(a)+1,[2:length_vector]));
node1 = graph1(index_separation(a)+1,1)
edge1 = graph1(index_separation(a)+1,[2:length_vector])
figure
plot(G);

    for b = index_separation(a)+2:index_separation(a)+2
            length_vector = 8 - sum(isnan(graph1(b,:)));
            node = graph1(b,1)
            edge = graph1(b,[2:length_vector])
            G = addedge(G,graph1(b,1), graph1(b,[2:length_vector]));
    end
   figure
   plot(G)
   